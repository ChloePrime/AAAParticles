plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

base {
    archivesName = rootProject.archives_base_name.replace('_', '-') + "-" + project.name
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    include modApi("dev.architectury:architectury-fabric:${rootProject.architectury_version}")
    compileOnly 'com.electronwill.night-config:toml:3.6.4'

    // Oculus
    modCompileOnly "maven.modrinth:iris:1.8.1+1.21.1-fabric"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    injectAccessWidener = true
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archivesBaseName
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "Chloe_Maven"
            url = "https://maven.chloeprime.cn:4080/releases/"
            credentials {
                username "$CHLOE_MAVEN_USERNAME"
                password "$CHLOE_MAVEN_PASSWORD"
            }
        }
    }
}