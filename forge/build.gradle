plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        url "https://maven.blamejared.com"
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    include modApi("dev.architectury:architectury-forge:${rootProject.architectury_version}")
    modImplementation "dev.latvian.mods:kubejs-forge:$kubejs_version"
    compileOnly "maven.modrinth:oculus:1.20.1-1.6.15a"

    // MixinExtras
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    include implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    modRuntimeOnly "org.embeddedt:embeddium-1.20.1:0.3.9-git.f603a93+mc1.20.1"
    modRuntimeOnly "maven.modrinth:oculus:1.20.1-1.7.0"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set("forge")
}

jar {
    archiveClassifier.set("dev")
    manifest {
        attributes([
                "MixinConfigs": "aaa_particles-common.mixins.json,aaa_particles.mixins.json"
        ])
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "Chloe_Maven"
            url = "https://maven.chloeprime.cn:4080/releases/"
            credentials {
                username "$CHLOE_MAVEN_USERNAME"
                password "$CHLOE_MAVEN_PASSWORD"
            }
        }
    }
}
