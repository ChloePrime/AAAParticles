plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "forge"
    }
}

base {
    archivesName = rootProject.archives_base_name.replace('_', '-') + "-neo" + project.name
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
    maven {
        // KubeJS依赖
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }
}

repositories {
    maven {
        url "https://maven.blamejared.com"
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    include modApi("dev.architectury:architectury-neoforge:${rootProject.architectury_version}")

    // KubeJS
    modCompileOnly "dev.latvian.mods:kubejs-neoforge:$kubejs_version"
    modCompileOnly 'dev.latvian.apps:tiny-java-server:1.0.0-build.16'

    // Oculus
    modCompileOnly "maven.modrinth:sodium:mc1.21.1-0.6.5-neoforge"
    modCompileOnly "maven.modrinth:iris:1.8.1+1.21.1-neoforge"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenNeoForge(MavenPublication) {
            artifactId = archivesBaseName
            pom.withXml {
                def node = asNode()
                if(node.dependencies.size() > 0)
                    node.remove(node.dependencies) // Remove deps, as they are all mappings-dependent and/or forge
            }
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "Chloe_Maven"
            url = "https://maven.chloeprime.cn:4080/releases/"
            credentials {
                username "$CHLOE_MAVEN_USERNAME"
                password "$CHLOE_MAVEN_PASSWORD"
            }
        }
    }
}
